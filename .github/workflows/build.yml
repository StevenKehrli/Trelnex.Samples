name: Build

run-name: Build ${{ github.event.inputs.project || github.event.pull_request.title || github.event.head_commit.message }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      project:
        description: "The project to build."
        required: true
        type: choice
        options:
          - Trelnex.Messages.Api
          - Trelnex.Messages.Client
          - Trelnex.Users.Api
          - Trelnex.Users.Client

jobs:

  create-matrix:
    name: Create the Build Matrix

    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      run_build: ${{ steps.set-matrix.outputs.run_build }}

    steps:

      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: read projects
        id: read-projects
        run: echo "projects=$(jq -c . .github/workflows/projects.json)" >> $GITHUB_OUTPUT

      - name: create path filters
        id: create-path-filters
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          PROJECTS='${{ steps.read-projects.outputs.projects }}'
          touch /tmp/filters.yml

          for project in $(echo "$PROJECTS" | jq -c '.projects[]'); do
            project_name=$(echo $project | jq -r '.name')

            # get paths array from project config
            paths=$(echo $project | jq -r '.paths[] | "  - " + .')

            # add filter using the provided paths
            echo -e "${project_name}:\n${paths}\n\n" >> /tmp/filters.yml
          done

          cat /tmp/filters.yml

      - name: get changed paths
        id: get-changed-paths
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: dorny/paths-filter@v3
        with:
          filters: /tmp/filters.yml

      - name: set matrix from input
        id: set-matrix-from-input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          PROJECTS='${{ steps.read-projects.outputs.projects }}'
          PROJECT='${{ github.event.inputs.project }}'

          # filter the projects to the input project
          BUILD_PROJECTS=$(echo "$PROJECTS" | jq -r --arg project "$PROJECT" '
            [ .projects[] |
              select(.name == $project) |
              select(.workflows | contains(["build"])) |
            {
              name: .name,
              dotnet_version: .dotnet_version,
              tests: .tests
            } ]
          ')

          echo "matrix-from-input={\"component\":$(echo $BUILD_PROJECTS)}" >> $GITHUB_OUTPUT

      - name: set matrix from changes
        id: set-matrix-from-changes
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          PROJECTS='${{ steps.read-projects.outputs.projects }}'
          CHANGED_PATHS='${{ toJSON(steps.get-changed-paths.outputs) }}'

          # filter the changed projects from the changed paths
          CHANGED_PROJECTS=$(echo "$CHANGED_PATHS" | jq -r '
            [. | to_entries | .[] | select(.value == "true") | .key]
          ')

          # filter the projects to the changed projects
          BUILD_PROJECTS=$(echo "$PROJECTS" | jq -r --argjson changed_projects "$CHANGED_PROJECTS" '
            [ .projects[] |
              select(.name as $name | $changed_projects[] | . == $name) |
              select(.workflows | contains(["build"])) |
            {
              name: .name,
              dotnet_version: .dotnet_version,
              tests: .tests
            } ]
          ')

          echo "matrix-from-changes={\"component\":$(echo $BUILD_PROJECTS)}" >> $GITHUB_OUTPUT

      - name: set final matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MATRIX='${{ steps.set-matrix-from-input.outputs.matrix-from-input }}'
          else
            MATRIX='${{ steps.set-matrix-from-changes.outputs.matrix-from-changes }}'
          fi

          RUN_BUILD=$(echo "$MATRIX" | jq -r '.[] | length > 0')
          echo "run_build=$RUN_BUILD" >> $GITHUB_OUTPUT

          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.component.name }}

    needs: create-matrix

    if: ${{ needs.create-matrix.outputs.run_build == 'true' }}

    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.create-matrix.outputs.matrix) }}
      fail-fast: false

    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.component.dotnet_version }}

      - name: dotnet nuget add source
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name "github" "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: dotnet restore project
        run: dotnet restore ${{ matrix.component.name }}/${{ matrix.component.name }}.csproj

      - name: dotnet build
        run: dotnet build ${{ matrix.component.name }}/${{ matrix.component.name }}.csproj --no-restore --configuration Release

      - name: dotnet restore test
        if: ${{ matrix.component.tests != null }}
        run: dotnet restore ${{ matrix.component.tests }}/${{ matrix.component.tests }}.csproj

      - name: dotnet test
        if: ${{ matrix.component.tests != null }}
        run: dotnet test ${{ matrix.component.tests }}/${{ matrix.component.tests }}.csproj --no-restore --logger html --results-directory "TestResults.${{ matrix.component.tests }}"

      - name: upload dotnet test results
        if: ${{ always() && matrix.component.tests != null }}
        uses: actions/upload-artifact@v4
        with:
          name: TestResults.${{ matrix.component.tests }}
          path: TestResults.${{ matrix.component.tests }}
          retention-days: 14
